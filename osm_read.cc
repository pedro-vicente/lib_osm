#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <assert.h>
#ifdef _MSC_VER
#include <io.h>
#else
#include <unistd.h>
#endif
extern "C"
{
#include "bstring.h"
#include "libhpxml.h"
}
#include "lib_osm.hh"

/////////////////////////////////////////////////////////////////////////////////////////////////////
//main
/////////////////////////////////////////////////////////////////////////////////////////////////////

int main(int argc, char* argv[])
{
  hpx_ctrl_t* ctl;
  hpx_tag_t* tag;
  bstring_t b;
  long lno;
  int fd;

  if ((fd = open("malibu_park.osm", O_RDONLY)) < 0)
  {
    exit(EXIT_FAILURE);
  }

  if ((ctl = hpx_init(fd, 100 * 1024 * 1024)) == NULL)
  {
  }
  if ((tag = hpx_tm_create(16)) == NULL)
  {
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////
  //loop as long as XML elements are available
  /////////////////////////////////////////////////////////////////////////////////////////////////////

  while (hpx_get_elem(ctl, &b, NULL, &lno) > 0)
  {
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    //parse XML element
    /////////////////////////////////////////////////////////////////////////////////////////////////////

    if (hpx_process_elem(b, tag) < 0)
    {
      printf("[%ld] ERROR in element: %.*s\n", lno, b.len, b.buf);
      assert(0);
      exit(1);
    }
    printf("[%ld] type=%d, name=%.*s, nattr=%d\n", lno, tag->type, tag->tag.len, tag->tag.buf, tag->nattr);
    std::string name(tag->tag.buf, tag->tag.len); //tag name
    bool in_node = false;

    /////////////////////////////////////////////////////////////////////////////////////////////////////
    //switch tag type 
    //HPX_ILL, HPX_OPEN, HPX_SINGLE, HPX_CLOSE, HPX_LITERAL, HPX_ATT, HPX_INSTR, HPX_COMMENT
    /////////////////////////////////////////////////////////////////////////////////////////////////////

    switch (tag->type)
    {
      /////////////////////////////////////////////////////////////////////////////////////////////////////
      //HPX_OPEN
      /////////////////////////////////////////////////////////////////////////////////////////////////////

    case HPX_OPEN:
      if (name.compare("node") == 0)
      {
        printf("%s open\n", name.c_str());
        in_node = true;
      }
      break;

      /////////////////////////////////////////////////////////////////////////////////////////////////////
      //HPX_CLOSE
      /////////////////////////////////////////////////////////////////////////////////////////////////////

    case HPX_CLOSE:
      if (name.compare("node") == 0)
      {
        printf("%s close\n", name.c_str());
        in_node = false;
      }
      break;

      /////////////////////////////////////////////////////////////////////////////////////////////////////
      //HPX_SINGLE
      /////////////////////////////////////////////////////////////////////////////////////////////////////

    case HPX_SINGLE:
      if (name.compare("node") == 0)
      {
        printf("%s single\n", name.c_str());
        assert(in_node == false); //cannot have single XML node while there is an open XML node
      }
      break;
    } //switch
  } //while

  if (!ctl->eof)
  {
    exit(EXIT_FAILURE);
  }

  hpx_tm_free(tag);
  hpx_free(ctl);
  close(fd);
  exit(EXIT_SUCCESS);
}

